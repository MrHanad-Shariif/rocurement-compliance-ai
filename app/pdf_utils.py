from fpdf import FPDF
import os
from datetime import datetime, timedelta
from typing import List, Dict

class MultilingualPDF(FPDF):
    def __init__(self, language='en'):
        super().__init__()
        self.language = language
        self.set_auto_page_break(auto=True, margin=15)
        # Set UTF-8 encoding for Unicode support
        try:
            self.add_font('DejaVu', '', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', uni=True)
            self.add_font('DejaVu', 'B', '/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf', uni=True)
            self.use_dejavu = True
        except:
            # Fallback to standard fonts if DejaVu not available
            self.use_dejavu = False
    
    def get_text_content(self) -> Dict[str, str]:
        """Get text content in different languages"""
        content = {
            "en": {
                "title": "Request for Quotation (RFQ)",
                "subtitle": "Procurement Compliance AI System",
                "legal_entity": "Legal Entity ID",
                "date": "Date",
                "deadline": "Submission Deadline",
                "item_type": "Item Type",
                "description": "Description",
                "quantity": "Quantity",
                "unit": "Unit",
                "total": "Total",
                "specifications": "Technical Specifications",
                "requirements": "Submission Requirements",
                "contact": "Contact Information",
                "footer": "This document is generated by Procurement Compliance AI System"
            },
            "ar": {
                "title": "طلب عرض سعر (RFQ)",
                "subtitle": "نظام الامتثال للمشتريات",
                "legal_entity": "رقم الكيان القانوني",
                "date": "التاريخ",
                "deadline": "موعد التقديم",
                "item_type": "نوع العنصر",
                "description": "الوصف",
                "quantity": "الكمية",
                "unit": "الوحدة",
                "total": "المجموع",
                "specifications": "المواصفات التقنية",
                "requirements": "متطلبات التقديم",
                "contact": "معلومات الاتصال",
                "footer": "تم إنشاء هذا المستند بواسطة نظام الامتثال للمشتريات"
            },
            "fr": {
                "title": "Demande de Devis (RFQ)",
                "subtitle": "Système d'IA de Conformité des Achats",
                "legal_entity": "ID de l'entité légale",
                "date": "Date",
                "deadline": "Date limite de soumission",
                "item_type": "Type d'article",
                "description": "Description",
                "quantity": "Quantité",
                "unit": "Unité",
                "total": "Total",
                "specifications": "Spécifications techniques",
                "requirements": "Exigences de soumission",
                "contact": "Informations de contact",
                "footer": "Ce document est généré par le système d'IA de conformité des achats"
            }
        }
        return content.get(self.language, content["en"])
    
    def set_font_safe(self, family, style='', size=12):
        """Set font with fallback to standard fonts if DejaVu not available"""
        if self.use_dejavu:
            self.set_font(family, style, size)
        else:
            # Fallback to standard fonts
            if family == 'DejaVu':
                family = 'Arial'
            self.set_font(family, style, size)

def generate_multilingual_rfq_pdf(legal_entity_id: int, item_types: List[str], 
                                 descriptions: List[str], quantities: List[int], 
                                 vendor_ids: str = "", language: str = "en") -> str:
    """Generate multilingual RFQ PDF with professional formatting"""
    
    # Create PDF directory if it doesn't exist
    os.makedirs("data/private_pdfs", exist_ok=True)
    
    # Initialize PDF with language
    pdf = MultilingualPDF(language)
    content = pdf.get_text_content()
    
    # Add page
    pdf.add_page()
    
    # Add Simad University logo at the top (skip for now)
    # logo_path = "app/static/img/simad_logo.png"
    # try:
    #     if os.path.exists(logo_path):
    #         pdf.image(logo_path, x=85, y=10, w=40)
    #         pdf.ln(30)
    # except Exception as e:
    #     # If logo fails to load, just continue without it
    #     print(f"Warning: Could not load logo: {e}")
    #     pdf.ln(30)
    
    # Skip logo for now and add some spacing
    pdf.ln(30)
    
    # Set font for RTL languages (Arabic)
    if language == "ar":
        pdf.add_font('DejaVu', '', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', uni=True)
        pdf.set_font('DejaVu', '', 12)
    else:
        pdf.set_font("Arial", '', 12)
    
    # Header
    pdf.set_font_safe("DejaVu", 'B', 18)
    pdf.cell(0, 15, content["title"], ln=True, align='C')
    
    pdf.set_font_safe("DejaVu", '', 12)
    pdf.cell(0, 8, content["subtitle"], ln=True, align='C')
    pdf.ln(10)
    
    # Document Information
    pdf.set_font_safe("DejaVu", 'B', 12)
    pdf.cell(0, 8, "Document Information", ln=True)
    pdf.set_font_safe("DejaVu", '', 10)
    
    current_date = datetime.now()
    deadline_date = current_date + timedelta(days=14)
    
    pdf.cell(40, 6, f"{content['legal_entity']}:", 0)
    pdf.cell(0, 6, str(legal_entity_id), ln=True)
    
    pdf.cell(40, 6, f"{content['date']}:", 0)
    pdf.cell(0, 6, current_date.strftime("%B %d, %Y"), ln=True)
    
    pdf.cell(40, 6, f"{content['deadline']}:", 0)
    pdf.cell(0, 6, deadline_date.strftime("%B %d, %Y"), ln=True)
    
    if vendor_ids:
        pdf.cell(40, 6, "Vendor IDs:", 0)
        pdf.cell(0, 6, vendor_ids, ln=True)
    
    pdf.ln(10)
    
    # Items Table
    pdf.set_font_safe("DejaVu", 'B', 12)
    pdf.cell(0, 8, "Requested Items", ln=True)
    pdf.ln(5)
    
    # Table header
    pdf.set_font_safe("DejaVu", 'B', 10)
    col_widths = [40, 80, 30, 30]
    pdf.cell(col_widths[0], 8, content["item_type"], 1, 0, 'C')
    pdf.cell(col_widths[1], 8, content["description"], 1, 0, 'C')
    pdf.cell(col_widths[2], 8, content["quantity"], 1, 0, 'C')
    pdf.cell(col_widths[3], 8, content["unit"], 1, 1, 'C')
    
    # Table content
    pdf.set_font_safe("DejaVu", '', 9)
    for i in range(len(item_types)):
        # Handle text wrapping for description
        desc_lines = pdf.multi_cell(col_widths[1], 6, descriptions[i], 0, 'L', split_only=True)
        max_lines = max(1, len(desc_lines))
        
        for line_idx in range(max_lines):
            if line_idx == 0:
                pdf.cell(col_widths[0], 6 * max_lines, item_types[i], 1, 0, 'L')
                pdf.cell(col_widths[1], 6, desc_lines[line_idx] if line_idx < len(desc_lines) else "", 1, 0, 'L')
                pdf.cell(col_widths[2], 6 * max_lines, str(quantities[i]), 1, 0, 'C')
                pdf.cell(col_widths[3], 6 * max_lines, "PCS", 1, 1, 'C')
            else:
                pdf.cell(col_widths[0], 6, "", 0, 0)
                pdf.cell(col_widths[1], 6, desc_lines[line_idx] if line_idx < len(desc_lines) else "", 0, 0, 'L')
                pdf.cell(col_widths[2], 6, "", 0, 0)
                pdf.cell(col_widths[3], 6, "", 0, 1)
    
    pdf.ln(10)
    
    # Technical Specifications
    pdf.set_font_safe("DejaVu", 'B', 12)
    pdf.cell(0, 8, content["specifications"], ln=True)
    pdf.set_font_safe("DejaVu", '', 10)
    pdf.multi_cell(0, 6, "- All items must meet industry standards and quality requirements\n- Provide detailed technical specifications for each item\n- Include safety certifications where applicable\n- Specify warranty terms and conditions", 0, 'L')
    
    pdf.ln(5)
    
    # Submission Requirements
    pdf.set_font_safe("DejaVu", 'B', 12)
    pdf.cell(0, 8, content["requirements"], ln=True)
    pdf.set_font_safe("DejaVu", '', 10)
    requirements = [
        "- Complete technical specifications",
        "- Detailed pricing breakdown",
        "- Delivery timeline and terms",
        "- Quality certifications and compliance documents",
        "- After-sales support and warranty information",
        "- Company profile and relevant experience"
    ]
    
    for req in requirements:
        pdf.multi_cell(0, 6, req, 0, 'L')
    
    pdf.ln(10)
    
    # Contact Information
    pdf.set_font_safe("DejaVu", 'B', 12)
    pdf.cell(0, 8, content["contact"], ln=True)
    pdf.set_font_safe("DejaVu", '', 10)
    pdf.cell(0, 6, "Email: procurement@company.com", ln=True)
    pdf.cell(0, 6, "Phone: +1 (555) 123-4567", ln=True)
    pdf.cell(0, 6, "Address: 123 Procurement Street, Business District", ln=True)
    
    # Footer
    pdf.ln(20)
    pdf.set_font_safe("DejaVu", '', 8)
    pdf.cell(0, 6, content["footer"], ln=True, align='C')
    
    # Generate filename and save
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"rfq_{legal_entity_id}_{language}_{timestamp}.pdf"
    filepath = os.path.join("data/private_pdfs", filename)
    
    pdf.output(filepath)
    return filename

def generate_rfq_pdf(legal_entity_id, item_types, descriptions, quantities):
    """Legacy function for backward compatibility"""
    return generate_multilingual_rfq_pdf(legal_entity_id, item_types, descriptions, quantities)

def generate_rfp_pdf(legal_entity_id: int, item_types: List[str], 
                    descriptions: List[str], quantities: List[int],
                    vendor_ids: str = "", language: str = "en") -> str:
    """Generate multilingual RFP PDF with detailed requirements"""
    
    # Create PDF directory if it doesn't exist
    os.makedirs("data/private_pdfs", exist_ok=True)
    
    # Initialize PDF with language
    pdf = MultilingualPDF(language)
    content = pdf.get_text_content()
    
    # Add page
    pdf.add_page()
    
    # Add Simad University logo at the top (skip for now)
    # logo_path = "app/static/img/simad_logo.png"
    # try:
    #     if os.path.exists(logo_path):
    #         pdf.image(logo_path, x=85, y=10, w=40)
    #         pdf.ln(30)
    # except Exception as e:
    #     # If logo fails to load, just continue without it
    #     print(f"Warning: Could not load logo: {e}")
    #     pdf.ln(30)
    
    # Skip logo for now and add some spacing
    pdf.ln(30)
    
    # Header
    pdf.set_font_safe("DejaVu", 'B', 18)
    pdf.cell(0, 15, "Request for Proposal (RFP)", ln=True, align='C')
    
    pdf.set_font_safe("DejaVu", '', 12)
    pdf.cell(0, 8, content["subtitle"], ln=True, align='C')
    pdf.ln(10)
    
    # Document Information
    pdf.set_font_safe("DejaVu", 'B', 12)
    pdf.cell(0, 8, "Project Information", ln=True)
    pdf.set_font_safe("DejaVu", '', 10)
    
    current_date = datetime.now()
    deadline_date = current_date + timedelta(days=30)
    
    pdf.cell(40, 6, f"{content['legal_entity']}:", 0)
    pdf.cell(0, 6, str(legal_entity_id), ln=True)
    
    pdf.cell(40, 6, f"{content['date']}:", 0)
    pdf.cell(0, 6, current_date.strftime("%B %d, %Y"), ln=True)
    
    pdf.cell(40, 6, f"{content['deadline']}:", 0)
    pdf.cell(0, 6, deadline_date.strftime("%B %d, %Y"), ln=True)
    
    pdf.ln(10)
    
    # Project Scope
    pdf.set_font_safe("DejaVu", 'B', 12)
    pdf.cell(0, 8, "Project Scope", ln=True)
    pdf.set_font_safe("DejaVu", '', 10)
    pdf.multi_cell(0, 6, "This RFP seeks proposals for the procurement of goods and services as specified below. Vendors are required to provide comprehensive proposals including technical approach, pricing, timeline, and compliance documentation.", 0, 'L')
    
    pdf.ln(10)
    
    # Items Table (same as RFQ)
    pdf.set_font_safe("DejaVu", 'B', 12)
    pdf.cell(0, 8, "Required Items", ln=True)
    pdf.ln(5)
    
    # Table header
    pdf.set_font_safe("DejaVu", 'B', 10)
    col_widths = [40, 80, 30, 30]
    pdf.cell(col_widths[0], 8, content["item_type"], 1, 0, 'C')
    pdf.cell(col_widths[1], 8, content["description"], 1, 0, 'C')
    pdf.cell(col_widths[2], 8, content["quantity"], 1, 0, 'C')
    pdf.cell(col_widths[3], 8, content["unit"], 1, 1, 'C')
    
    # Table content
    pdf.set_font_safe("DejaVu", '', 9)
    for i in range(len(item_types)):
        desc_lines = pdf.multi_cell(col_widths[1], 6, descriptions[i], 0, 'L', split_only=True)
        max_lines = max(1, len(desc_lines))
        
        for line_idx in range(max_lines):
            if line_idx == 0:
                pdf.cell(col_widths[0], 6 * max_lines, item_types[i], 1, 0, 'L')
                pdf.cell(col_widths[1], 6, desc_lines[line_idx] if line_idx < len(desc_lines) else "", 1, 0, 'L')
                pdf.cell(col_widths[2], 6 * max_lines, str(quantities[i]), 1, 0, 'C')
                pdf.cell(col_widths[3], 6 * max_lines, "PCS", 1, 1, 'C')
            else:
                pdf.cell(col_widths[0], 6, "", 0, 0)
                pdf.cell(col_widths[1], 6, desc_lines[line_idx] if line_idx < len(desc_lines) else "", 0, 0, 'L')
                pdf.cell(col_widths[2], 6, "", 0, 0)
                pdf.cell(col_widths[3], 6, "", 0, 1)
    
    pdf.ln(10)
    
    # Evaluation Criteria
    pdf.set_font_safe("DejaVu", 'B', 12)
    pdf.cell(0, 8, "Evaluation Criteria", ln=True)
    pdf.set_font_safe("DejaVu", '', 10)
    criteria = [
        "- Technical Approach (30%)",
        "- Cost Effectiveness (25%)",
        "- Experience and Qualifications (20%)",
        "- Timeline and Delivery (15%)",
        "- Compliance and Quality Assurance (10%)"
    ]
    
    for criterion in criteria:
        pdf.multi_cell(0, 6, criterion, 0, 'L')
    
    # Generate filename and save
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"rfp_{legal_entity_id}_{language}_{timestamp}.pdf"
    filepath = os.path.join("data/private_pdfs", filename)
    
    pdf.output(filepath)
    return filename
